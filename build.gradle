buildscript {
    ext.kotlin_version = "1.3.21"
    ext.springBootVersion = "2.1.2.RELEASE"

    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"

        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlin_version}"
        classpath "org.jetbrains.kotlin:kotlin-allopen:${kotlin_version}"

        classpath "gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.13.0"
    }
}

apply plugin: "kotlin"
apply plugin: "kotlin-spring"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"
apply plugin: "com.palantir.docker"

group   "org.rentalhouse"
version "1.0-SNAPSHOT"

repositories {
    mavenCentral()
    jcenter()
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:Finchley.SR2"
    }
}

dependencies {

    compile             "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile             "org.springframework.boot:spring-boot-starter-data-mongodb"
    compile             "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.7"
    compile             "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client"

    implementation      "org.springframework.boot:spring-boot-starter-web"

    testCompile         "org.assertj:assertj-core:3.12.2"
    testCompile         "org.springframework.boot:spring-boot-starter-test"

    testImplementation  "io.mockk:mockk:1.9"
    testImplementation  "org.junit.jupiter:junit-jupiter:5.4.1"
    testImplementation  "de.flapdoodle.embed:de.flapdoodle.embed.mongo:2.2.0"
}

test {
    useJUnitPlatform()
    testLogging {
        events 'PASSED', 'FAILED', 'SKIPPED'
    }
}

task unpack(type: Copy) {
    dependsOn bootJar
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into("build/dependency")
}

docker {
    name "${project.group}/${bootJar.baseName}"
    copySpec.from(tasks.unpack.outputs).into("dependency")
    dockerfile file("docker/Dockerfile")
    buildArgs(['DEPENDENCY': "dependency"])
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

build.dependsOn test